@using Entities
@using Bussiness

<EditForm Model="oProduct">
    <div class="form-group">
        <label>Producto</label>
        <InputText class="form-control" @bind-Value="oProduct.ProductName"></InputText>
    </div>
    <div class="form-group">
        <label>Descripción</label>
        <InputTextArea class="form-control" @bind-Value="oProduct.ProductDescription"></InputTextArea>
    </div>
    <div class="form-group">
        <label>Categoria</label>
        <InputSelect class="form-control" @bind-Value="oProduct.CategoryId">
            @foreach (var category in categories)
            {
                <option value="@category.CategoryId">@category.CategoryName</option>
            }
        </InputSelect>
    </div>
    <br />
    <input type="button" value="Actualizar producto" @onclick="UpdateProduct" />

</EditForm>



@inject B_Product _Product
@inject B_Category _Category
@inject NavigationManager _NavManager

@code {

    [Parameter]
    public string IdProduct { get; set; }

    ProductEntity oProduct = new ProductEntity();
    List<CategoryEntity> categories = new List<CategoryEntity>();

    protected override async Task OnInitializedAsync()
    {
        categories = _Category.CategoryList();
        oProduct = _Product.GetProductForId(IdProduct);
    }
    private void UpdateProduct()
    {
        _Product.UpdateProduct(oProduct);
        _NavManager.NavigateTo("products/list");
    }

}
